<template>
  <div class="container mt-4">
    <div class="card">
      <div class="card-header">Manage Agents</div>
      <div class="card-body">
        <!-- Filter Section -->
        <div class="mb-3">
          <label for="searchAgentName" class="form-label"
            >Search Agent by Name:</label
          >
          <input
            type="text"
            class="form-control"
            id="searchAgentName"
            v-model="searchName"
            placeholder="Enter agent name..."
          />
        </div>
        <div class="mb-3">
          <label for="searchAgentService" class="form-label"
            >Search Agent by Service:</label
          >
          <input
            type="text"
            class="form-control"
            id="searchAgentService"
            v-model="searchService"
            placeholder="Enter agent service..."
          />
        </div>
        <div class="mb-3">
          <label for="searchAgentFunction" class="form-label"
            >Search Agent by Function:</label
          >
          <input
            type="text"
            class="form-control"
            id="searchAgentFunction"
            v-model="searchFunction"
            placeholder="Enter agent function..."
          />
        </div>

        <!-- Table Section -->
        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>#</th>
                <th>Name</th>
                <th>Email</th>
                <th>Service</th>
                <th>Function</th>
                <th>Actions</th>
                <th>View</th>
              </tr>
            </thead>
            <tbody>
              <tr v-for="(agent, index) in currentPageItems" :key="agent.id">
                <td>{{ index + 1 }}</td>
                <td>{{ agent.name }}</td>
                <td>{{ agent.email }}</td>
                <td>{{ agent.service }}</td>
                <td>{{ agent.function }}</td>
                <td>
                  <button
                    class="btn btn-sm btn-primary me-1"
                    @click="showEditAgentModal(agent)"
                  >
                    Edit
                  </button>
                  <button
                    class="btn btn-sm btn-danger"
                    @click="showDeleteConfirmationModal(agent.id)"
                  >
                    Delete
                  </button>
                </td>
                <td>
                  <router-link
                    :to="{
                      name: 'ViewAssignedTraining',
                      params: { id: agent.id },
                    }"
                    class="btn btn-sm btn-primary me-1"
                  >
                    View
                  </router-link>
                </td>
              </tr>
            </tbody>
          </table>
        </div>

        <!-- Add New Agent Button -->
        <div class="text-end mt-3">
          <button
            type="button"
            class="btn btn-primary"
            data-bs-toggle="modal"
            data-bs-target="#addAgentModal"
          >
            Add New Agent
          </button>
        </div>

        <!-- Add Agent Modal -->
        <div
          class="modal fade"
          id="addAgentModal"
          tabindex="-1"
          aria-labelledby="addAgentModalLabel"
          aria-hidden="true"
          @hidden="resetAddAgentForm"
        >
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="addAgentModalLabel">
                  Add New Agent
                </h5>
                <button
                  type="button"
                  class="btn-close"
                  data-bs-dismiss="modal"
                  aria-label="Close"
                ></button>
              </div>
              <div class="modal-body">
                <form @submit.prevent="handleAddAgent">
                  <div class="mb-3">
                    <label for="inputName" class="form-label">Name:</label>
                    <input
                      type="text"
                      class="form-control"
                      id="inputName"
                      v-model="name"
                      placeholder="Enter name"
                      :class="{ 'is-invalid': nameError }"
                    />
                    <div v-if="nameError" class="invalid-feedback">
                      {{ nameError }}
                    </div>
                  </div>
                  <div class="mb-3">
                    <label for="inputEmail" class="form-label">Email:</label>
                    <input
                      type="email"
                      class="form-control"
                      id="inputEmail"
                      v-model="email"
                      placeholder="Enter email"
                      :class="{ 'is-invalid': emailError }"
                    />
                    <div v-if="emailError" class="invalid-feedback">
                      {{ emailError }}
                    </div>
                  </div>
                  <div class="mb-3">
                    <label for="inputService" class="form-label"
                      >Service:</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="inputService"
                      v-model="service"
                      placeholder="Enter service"
                      :class="{ 'is-invalid': serviceError }"
                    />
                    <div v-if="serviceError" class="invalid-feedback">
                      {{ serviceError }}
                    </div>
                  </div>
                  <div class="mb-3">
                    <label for="inputFunction" class="form-label"
                      >Function:</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="inputFunction"
                      v-model="func"
                      placeholder="Enter function"
                      :class="{ 'is-invalid': funcError }"
                    />
                    <div v-if="funcError" class="invalid-feedback">
                      {{ funcError }}
                    </div>
                  </div>
                  <div class="modal-footer">
                    <button
                      type="button"
                      class="btn btn-secondary"
                      data-bs-dismiss="modal"
                    >
                      Close
                    </button>
                    <button type="submit" class="btn btn-primary">
                      Save changes
                    </button>
                  </div>
                </form>
                <div
                  v-if="errorAddAgent"
                  class="alert alert-danger mt-3"
                  role="alert"
                >
                  {{ errorAddAgent }}
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Edit Agent Modal -->
        <div
          class="modal fade"
          id="editAgentModal"
          tabindex="-1"
          aria-labelledby="editAgentModalLabel"
          aria-hidden="true"
        >
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="editAgentModalLabel">Edit Agent</h5>
                <button
                  type="button"
                  class="btn-close"
                  data-bs-dismiss="modal"
                  aria-label="Close"
                ></button>
              </div>
              <div class="modal-body">
                <form @submit.prevent="handleEditAgent">
                  <div class="mb-3">
                    <label for="editInputName" class="form-label">Name:</label>
                    <input
                      type="text"
                      class="form-control"
                      id="editInputName"
                      v-model="editName"
                      placeholder="Enter name"
                      :class="{ 'is-invalid': editNameError }"
                    />
                    <div v-if="editNameError" class="invalid-feedback">
                      {{ editNameError }}
                    </div>
                  </div>
                  <div class="mb-3">
                    <label for="editInputEmail" class="form-label"
                      >Email:</label
                    >
                    <input
                      type="email"
                      class="form-control"
                      id="editInputEmail"
                      v-model="editEmail"
                      placeholder="Enter email"
                      :class="{ 'is-invalid': editEmailError }"
                    />
                    <div v-if="editEmailError" class="invalid-feedback">
                      {{ editEmailError }}
                    </div>
                  </div>

                  <div class="mb-3">
                    <label for="editInputService" class="form-label"
                      >Service:</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="editInputService"
                      v-model="editService"
                      placeholder="Enter service"
                      :class="{ 'is-invalid': editServiceError }"
                    />
                    <div v-if="editServiceError" class="invalid-feedback">
                      {{ editServiceError }}
                    </div>
                  </div>
                  <div class="mb-3">
                    <label for="editInputFunction" class="form-label"
                      >Function:</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="editInputFunction"
                      v-model="editFunc"
                      placeholder="Enter function"
                      :class="{ 'is-invalid': editFuncError }"
                    />
                    <div v-if="editFuncError" class="invalid-feedback">
                      {{ editFuncError }}
                    </div>
                  </div>
                  <div class="modal-footer">
                    <button
                      type="button"
                      class="btn btn-secondary"
                      data-bs-dismiss="modal"
                    >
                      Close
                    </button>
                    <button type="submit" class="btn btn-primary">
                      Save changes
                    </button>
                  </div>
                </form>
                <div
                  v-if="errorEditAgent"
                  class="alert alert-danger mt-3"
                  role="alert"
                >
                  {{ errorEditAgent }}
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Pagination -->
        <nav aria-label="Page navigation">
          <ul class="pagination justify-content-center mt-3">
            <li class="page-item" :class="{ disabled: currentPage === 1 }">
              <a class="page-link" href="#" @click.prevent="changePage(1)"
                >First</a
              >
            </li>
            <li class="page-item" :class="{ disabled: currentPage === 1 }">
              <a
                class="page-link"
                href="#"
                @click.prevent="changePage(currentPage - 1)"
                >Previous</a
              >
            </li>
            <li
              v-for="page in totalPages"
              :key="page"
              class="page-item"
              :class="{ active: currentPage === page }"
            >
              <a class="page-link" href="#" @click.prevent="changePage(page)">{{
                page
              }}</a>
            </li>
            <li
              class="page-item"
              :class="{ disabled: currentPage === totalPages }"
            >
              <a
                class="page-link"
                href="#"
                @click.prevent="changePage(currentPage + 1)"
                >Next</a
              >
            </li>
            <li
              class="page-item"
              :class="{ disabled: currentPage === totalPages }"
            >
              <a
                class="page-link"
                href="#"
                @click.prevent="changePage(totalPages)"
                >Last</a
              >
            </li>
          </ul>
        </nav>

        <!-- Delete Confirmation Modal -->
        <div
          class="modal fade"
          id="deleteConfirmationModal"
          tabindex="-1"
          aria-labelledby="deleteConfirmationModalLabel"
          aria-hidden="true"
        >
          <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmationModalLabel">
                  Confirm Delete
                </h5>
                <button
                  type="button"
                  class="btn-close"
                  data-bs-dismiss="modal"
                  aria-label="Close"
                ></button>
              </div>
              <div class="modal-body">
                Are you sure you want to delete this agent?
              </div>
              <div class="modal-footer">
                <button
                  type="button"
                  class="btn btn-secondary"
                  data-bs-dismiss="modal"
                >
                  Cancel
                </button>
                <button
                  type="button"
                  class="btn btn-danger"
                  @click="deleteAgent"
                >
                  Delete
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Toast Notification -->

        <div
          class="toast-container align-items-center text-white border-0"
          style="
            position: fixed;
            top: 10%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 11;
          "
          :class="{ show: showSuccessToast }"
        >
          <div
            id="liveToast"
            class="toast"
            role="alert"
            aria-live="assertive"
            aria-atomic="true"
            data-bs-delay="3000"
          >
            <div class="toast-header">
              <strong class="me-auto">Notification</strong>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="toast"
                aria-label="Close"
                @click="closeToast"
              ></button>
            </div>
            <div class="toast-body bg-success">{{ toastMessage }}</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import axios from "axios";
import * as bootstrap from "bootstrap";

export default {
  data() {
    return {
      agents: [],
      currentPage: 1,
      itemsPerPage: 10,
      searchName: "",
      searchService: "",
      searchFunction: "",
      name: "",
      email: "",
      service: "",
      func: "",
      editName: "",
      editEmail: "",
      editService: "",
      editFunc: "",
      editAgentId: null,
      errorAddAgent: "",
      errorEditAgent: "",
      deleteAgentId: null,
      toastMessage: "",
      showSuccessToast: false,
    };
  },
  computed: {
    filteredAgents() {
      const { searchName, searchService, searchFunction, agents } = this;
      if (!agents) return [];
      return agents.filter(
        (agent) =>
          (!searchName ||
            agent.name.toLowerCase().includes(searchName.toLowerCase())) &&
          (!searchService ||
            agent.service
              .toLowerCase()
              .includes(searchService.toLowerCase())) &&
          (!searchFunction ||
            agent.function.toLowerCase().includes(searchFunction.toLowerCase()))
      );
    },
    totalPages() {
      return Math.ceil(this.filteredAgents.length / this.itemsPerPage);
    },
    currentPageItems() {
      const { currentPage, itemsPerPage, filteredAgents } = this;
      const start = (currentPage - 1) * itemsPerPage;
      const end = start + itemsPerPage;
      return filteredAgents.slice(start, end);
    },
    isEmailValid() {
      return (
        this.email &&
        this.isValidEmail(this.email) &&
        !this.emailExists(this.email)
      );
    },
  },
  methods: {
    // Validation methods
    validateField(value, fieldName, errorFieldName) {
      if (!value) {
        this[errorFieldName] = `${fieldName} is required.`;
        return false;
      } else {
        this[errorFieldName] = "";
        return true;
      }
    },
    validateEmailField(email, errorFieldName) {
      if (!email) {
        this[errorFieldName] = "Email is required.";
        return false;
      } else if (!this.isValidEmail(email)) {
        this[errorFieldName] = "Invalid email format.";
        return false;
      } else if (this.emailExists(email)) {
        this[errorFieldName] = "Email already exists.";
        return false;
      } else {
        this[errorFieldName] = "";
        return true;
      }
    },
    validateEditEmail() {
      this.editEmailError = this.validateEmailField(
        this.editEmail,
        "editEmailError"
      )
        ? ""
        : this.editEmailError;
    },
    // Handle form submissions
    handleAddAgent() {
      const { name, email, service, func } = this;
      if (
        !this.validateField(name, "Name", "nameError") ||
        !this.validateField(service, "Service", "serviceError") ||
        !this.validateField(func, "Function", "funcError") ||
        !this.validateEmailField(email, "emailError")
      ) {
        return;
      }
      this.errorAddAgent = "";
      axios
        .post("http://127.0.0.1:8000/api/agents", {
          name,
          email,
          service,
          function: func,
        })
        .then(() => {
          this.fetchAgents();
          this.showToast("Agent added successfully!");
          this.resetAddAgentForm();
        })
        .catch(this.handleAgentError);
    },
    handleEditAgent() {
      const { editName, editEmail, editService, editFunc } = this;
      if (
        !this.validateField(editName, "Name", "editNameError") ||
        !this.validateField(editService, "Service", "editServiceError") ||
        !this.validateField(editFunc, "Function", "editFuncError") ||
        !this.validateEmailField(editEmail, "editEmailError")
      ) {
        return;
      }
      this.errorEditAgent = "";
      axios
        .put(`http://127.0.0.1:8000/api/agents/${this.editAgentId}`, {
          name: editName,
          email: editEmail,
          service: editService,
          function: editFunc,
        })
        .then(() => {
          this.showToast("Agent updated successfully!");
          this.fetchAgents();
          this.resetEditAgentForm();
        })
        .catch(this.handleAgentError);
    },
    // Reset form fields and errors
    resetAddAgentForm() {
      this.name = "";
      this.email = "";
      this.service = "";
      this.func = "";
      this.nameError = "";
      this.emailError = "";
      this.serviceError = "";
      this.funcError = "";
      this.errorAddAgent = "";
      this.hideModal("addAgentModal");
    },
    resetEditAgentForm() {
      this.editName = "";
      this.editEmail = "";
      this.editService = "";
      this.editFunc = "";
      this.editAgentId = null;
      this.errorEditAgent = "";
      this.hideModal("editAgentModal");
    },
    // Show/hide Bootstrap modals
    showModal(modalId) {
      new bootstrap.Modal(document.getElementById(modalId)).show();
    },
    hideModal(modalId) {
      const modal = bootstrap.Modal.getInstance(
        document.getElementById(modalId)
      );
      if (modal) modal.hide();
    },
    // Fetch agents from API
    fetchAgents() {
      axios.get("http://127.0.0.1:8000/api/agents").then((response) => {
        this.agents = response.data.agents;
      });
    },
    // Toast notification
    showToast(message) {
      this.toastMessage = message;
      this.showSuccessToast = true;
      setTimeout(() => {
        this.showSuccessToast = false;
      }, 3000);
    },
    // Error handling
    handleAgentError(error) {
      if (error.response && error.response.data) {
        this.errorAddAgent = error.response.data.message;
      } else {
        this.errorAddAgent = "An error occurred while processing the agent.";
      }
    },
    // Other utility methods
    isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    },
    emailExists(email) {
      return this.agents.some((agent) => agent.email === email);
    },
  },
  mounted() {
    this.fetchAgents();
  },
  // Watchers
  watch: {
    name: "validateName",
    service: "validateService",
    func: "validateFunction",
    email: "validateEmail",
    editEmail: "validateEditEmail",
  },
};
</script>

<style>
.modal-footer .btn + .btn {
  margin-left: 0.5rem;
}
</style>
