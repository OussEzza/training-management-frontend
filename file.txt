<template>
  <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
    <div class="container-fluid">
      <router-link class="navbar-brand text-light" to="/">Navbar</router-link>
      <button
        class="navbar-toggler"
        type="button"
        data-bs-toggle="collapse"
        data-bs-target="#navbarSupportedContent"
        aria-controls="navbarSupportedContent"
        aria-expanded="false"
        aria-label="Toggle navigation"
      >
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav me-auto mb-2 mb-lg-0">
          <li class="nav-item">
            <router-link
              class="nav-link text-light"
              :class="{ active: $route.path === '/' }"
              aria-current="page"
              to="/"
            >
              Home
            </router-link>
          </li>
          <li class="nav-item">
            <router-link
              class="nav-link text-light"
              :class="{ active: $route.path === '/trainings' }"
              to="/trainings"
            >
              Training
            </router-link>
          </li>
          <li class="nav-item">
            <router-link
              class="nav-link text-light"
              :class="{ active: $route.path === '/agents' }"
              to="/agents"
            >
              Agent
            </router-link>
          </li>
          <li class="nav-item">
            <router-link
              class="nav-link text-light"
              :class="{ active: $route.path === '/agent-training' }"
              to="/agent-training"
            >
              Assign Agent
            </router-link>
          </li>
          <li class="nav-item">
            <!-- Notification button -->
            <div class="dropdown">
              <button
                type="button"
                class="btn btn-warning ms-2 dropdown-toggle"
                data-bs-toggle="dropdown"
                aria-expanded="false"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="16"
                  height="16"
                  fill="currentColor"
                  class="bi bi-bell"
                  viewBox="0 0 16 16"
                >
                  <path
                    d="M8 16a1.5 1.5 0 0 0 1.5-1.5h-3A1.5 1.5 0 0 0 8 16zm7-9V7c0 3.066-2.214 5.629-5.068 6.143a.75.75 0 0 0 .136.248l.522.522H5.41l.522-.522a.75.75 0 0 0 .136-.248C2.214 12.629 0 10.066 0 7V7l1-.001A7 7 0 0 1 8 .999zm-7-2a1 1 0 0 0-1 1v1c0 2.325 1.791 4.243 4.097 4.472.251.854.957 1.528 1.903 1.528s1.652-.674 1.903-1.528C14.209 5.243 16 3.325 16 1V0h-1v1c0 1.518-1.109 2.782-2.561 2.97a3.25 3.25 0 0 1-6.878 0C2.109 3.782 1 2.518 1 1V0H0v1a1 1 0 0 0 1 1z"
                  />
                </svg>
                <span class="badge bg-danger">{{
                  expiringTrainings.length
                }}</span>
              </button>
              <ul class="dropdown-menu">
                <li v-if="expiringTrainings.length > 0">
                  <h6 class="dropdown-header">Expiring Trainings</h6>
                  <button
                    v-for="(agentTraining, index) in expiringTrainings"
                    :key="index"
                    type="button"
                    class="dropdown-item"
                    @click="redirectToTraining(agentTraining)"
                  >
                    <span v-if="getAgentName(agentTraining.agent_id)">{{
                      getAgentName(agentTraining.agent_id)
                    }}</span>
                    -
                    <span v-if="getTrainingName(agentTraining.training_id)">{{
                      getTrainingName(agentTraining.training_id)
                    }}</span>
                    -
                    {{ agentTraining.date_to }}
                  </button>
                </li>
                <li v-else>
                  <span class="dropdown-item-text">No expiring trainings</span>
                </li>
              </ul>
            </div>
          </li>
        </ul>
        <button type="button" @click="logout" class="btn btn-danger">
          Logout
        </button>
      </div>
    </div>
  </nav>
</template>

<script>
import axios from "axios";

export default {
  data() {
    return {
      agent_training: [],
      expiringTrainings: [],
      agents: [],
      trainings: [],
    };
  },
  methods: {
    async logout() {
      try {
        await axios.post("http://127.0.0.1:8000/api/logout", null, {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        });
        localStorage.removeItem("token");
        localStorage.removeItem("user");
        this.$router.push("/login");
        console.log("Logout completed");
      } catch (error) {
        console.error("Logout error:", error.response.data);
      }
    },
    async getAgentTraining() {
      try {
        const response = await axios.get(
          "http://127.0.0.1:8000/api/agent-training",
          {
            headers: {
              Authorization: `Bearer ${localStorage.getItem("token")}`,
            },
          }
        );
        this.agent_training = response.data.agent_training;
        this.showExpiringTrainingsAlert();
      } catch (error) {
        console.error("Error fetching agent training:", error);
      }
    },
    async getAgents() {
      try {
        const response = await axios.get("http://127.0.0.1:8000/api/agents");
        this.agents = response.data.agents;
      } catch (error) {
        console.error("Error fetching agents:", error);
      }
    },
    async getTrainings() {
      try {
        const response = await axios.get("http://127.0.0.1:8000/api/trainings");
        this.trainings = response.data.trainings;
      } catch (error) {
        console.error("Error fetching trainings:", error);
      }
    },
    showExpiringTrainingsAlert() {
      const today = new Date();
      this.expiringTrainings = this.agent_training.filter(async (training) => {
        try {
          const response = await axios.get(
            `http://127.0.0.1:8000/api/trainings/${training.training_id}`
          );
          const startDate = new Date(training.date_from);
          const expiryDate = this.calculateExpiryDate(
            startDate,
            response.data.training.duration
          );
          const diffInDays = Math.floor(
            (expiryDate - today) / (1000 * 60 * 60 * 24)
          );

          return diffInDays <= 30 && diffInDays > 0;
        } catch (error) {
          console.error("Error fetching training details:", error);
          return false; // Or handle the error appropriately
        }
      });
    },

    calculateExpiryDate(startDate, endDate) {
      return new Date(endDate);
    },

    getAgentName(agentId) {
      const agent = this.agents.find((agent) => agent.id === agentId);
      return agent ? agent.name : "";
    },
    getTrainingName(trainingId) {
      const training = this.trainings.find(
        (training) => training.id === trainingId
      );
      return training ? training.name : "";
    },

    redirectToTraining(training) {
      console.log("Redirect to training:", training);
      // Implement the logic to navigate to the training details page
    },
  },
  created() {
    this.getAgentTraining();
    this.getAgents();
    this.getTrainings();
  },
};
</script>

<style>
.navbar-nav .btn-logout {
  margin-left: 10px;
}
</style>
